#!/bin/bash

#-----------------------------------------------------------------------
# sh config query script for artemis @ARTEMIS_VERSION@ on UNIX platforms
# Autogenerated by CMake DO NOT EDIT
# 
# use genat4-config
#-----------------------------------------------------------------------
script="$0"
calldir=`pwd`
loopcount=""


while [ "x`readlink $script`" != "x" ] ; do
  preloc=`dirname $script`
  script=`readlink $script`

  if [ ${script##/} = ${script##~} ] ; then
    # The symbolic link was relative...
    script="$preloc/$script"
  fi
  loopcount="l$loopcount"

  if [ ${#loopcount} -gt 10 ] ; then
    echo "error: more than 10 symbolic links to artemis-config traversed."
    exit 1
  fi
done

# If we still have a relative path, then it must be relative to the 
# calling dir. NB we don't attempt to resolve directory symbolic 
# links or remove '.' or '..'
if [ ${script##/} = ${script##~} ] ; then
  script="$calldir/$script"
fi

#-----------------------------------------------------------------------
# Finally, grab the directory in which the script is located
# Used below should we be setup to be relocatable.
scriptloc=`dirname $script`


package=@PACKAGE@
version=@VERSION@
prefix=@CMAKE_INSTALL_PREFIX@
exec_prefix=@CMAKE_INSTALL_PREFIX@/bin
cxx=@CXX@
libdir=@CMAKE_INSTALL_PREFIX@/lib
includedirs="@CMAKE_INSTALL_PREFIX@/include @yaml_cpp_INCLUDEDIR@"

name=${package}
description="ARTEMIS - A RooT Extension with Modular processors for Instant Swiching"

cflags=""
for artemis_incdir in ${includedirs} ; do
  cflags="${cflags} -I${artemis_incdir}"
done

libs="-lcatcmd \
-lcatloop \
-lcatcore \
-lartcont \
-lcatmc \
-lartdecoder \
-lartridf \
-lartrdf \
-larthist \
-lartparam \
-lartshare \
-lCAT"

dypaths=":@CMAKE_INSTALL_PREFIX@/lib:@yaml_cpp_LIBDIR@"

if [ "@BUILD_GET@" == "ON" ]; then 
  libs="${libs} -lGETDecoder"
  cflags="${cflags} -I@GET_INCLUDE_DIR@"
  dypaths="${dypaths}:@GET_LIB_DIR@"
fi

help()
{
    cat<<EOF
Usage: artemis-config [OPTION...]
  --prefix                output installation prefix of ARTEMIS
  --version               output version for ARTEMIS
  --incdir                output all linker flags
  --libs                  output all linker flags
  --cflags                output all preprocessor
                          and compiler flags
  --cxx                   Print alternative C++ compiler specified when ARTEMIS was built

  -?, --help              show this help message
  --usage                 display brief usage message

EOF
    exit 1
}

usage()
{
  cat<<EOF
Usage: artemis-config [--prefix] [--version] [--libs] [--cflags] [--incdir] [--cxx] [--dypaths]
EOF
  exit 1
}


if test $# -eq 0 ; then
  usage
fi

while test $# -gt 0 ; do
  case "$1" in
    -*=*)
      optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'`
      ;;
    *)
      optarg=
      ;;
  esac

  case "$1" in
    --prefix)
      echo ${prefix}
      ;;

    --version)
      echo ${version}
      ;;

    --libs)
      echo "-L${libdir}" ${libs} @YAML_CPP_LIB@
      ;;

    --cflags)
      echo ${cflags}
      ;;

    --incdir)
      echo ${includedirs}
      ;;

    --cxx)
      echo ${cxx}
      ;;

    --dypaths)
      echo ${dypaths}
      ;;

    -?)
      help
      ;;

    --help)
      help
      ;;

    --usage)
      usage
      ;;

    *)
      usage
      ;;
  esac

  shift
done

# Finally...
exit 0

